package com.canal5.knowted;

import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URI;
import java.net.URISyntaxException;

import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.methods.HttpGet;
import org.apache.http.impl.client.DefaultHttpClient;

import android.content.Context;
import android.util.Log;

public class getAllNotesThread extends Thread {

	private final Context context;
	private final String auth_token;
	private final String requestURL;
	private String returnString;

	public getAllNotesThread(Context context, String auth_token,
			String requestURL) {
		// TODO Auto-generated constructor stub
		this.context = context;
		this.auth_token = auth_token;
		this.requestURL = requestURL;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub

		HttpClient httpClient = new DefaultHttpClient();

		String xmlResponse;

		try {
			/**
			 * FOR LOCAL DEV String url =
			 * "http://192.168.0.186:3000/events?format=xml";
			 */
			String url = "http://cold-leaf-59.heroku.com/myevents?format=xml";
			Log.d("gertigable", "performing get " + url);

			HttpGet method = new HttpGet(new URI(url));
			HttpResponse response = httpClient.execute(method);
			if (response != null) {
				xmlResponse = getResponse(response.getEntity());
			} else {
				Log.i("Gertig", "got a null response");
			}
		} catch (IOException e) {
			Log.e("Error", "IOException " + e.getMessage());
		} catch (URISyntaxException e) {
			Log.e("Error", "URISyntaxException " + e.getMessage());
		}

		// System.out.println("Getting all notes from: "+ requestURL);
		//
		// try {
		// returnString = sendReceiveJSON.getAllEvents(requestURL, auth_token );
		// } catch (IOException e) {
		// // TODO Auto-generated catch block
		// e.printStackTrace();
		// }
		//
		//
		// System.out.println("Message from " + requestURL + ": "
		// + returnString + "\n");
		//
		//

	}

	private String getResponse(HttpEntity entity) {
		String response = "";

		try {
			int length = (int) entity.getContentLength();
			StringBuffer sb = new StringBuffer(length);
			InputStreamReader isr = new InputStreamReader(entity.getContent(),
					"UTF-8");
			char buff[] = new char[length];
			int cnt;
			while ((cnt = isr.read(buff, 0, length - 1)) > 0) {
				sb.append(buff, 0, cnt);
			}

			response = sb.toString();
			isr.close();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}

		return response;
	}

}
